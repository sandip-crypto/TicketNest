import axios from "axios";
import React, { useEffect, useState } from "react";
import {
  FaUsers,
  FaStore,
  FaCalendarAlt,
  FaTicketAlt,
  FaMoneyBillAlt,
  FaClock,
  FaExclamationCircle,
} from "react-icons/fa";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
} from "recharts";

const Overview = () => {
  const [userCount, setUserCount] = useState([]);
  const [vendorCount, setVendorCount] = useState([]);
  const [revenue, setRevenue] = useState(0);
  const [upcomingEvents, setUpcomingEvents] = useState(0);
  const [pendingApprovals, setPendingApprovals] = useState(0);
  const [recentActivities, setRecentActivities] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [vendorsRevenue, setVendorsRevenue] = useState([]);
  const [businessRevenue, setBusinessRevenue] = useState([]);
  const [filteredSales, setFilteredSales] = useState([]);

  const [selectedVendor, setSelectedVendor] = useState("");
  const [selectedBusinessType, setSelectedBusinessType] = useState("");

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const { data } = await axios.get("/api/v1/auth/all-users", {
          withCredentials: true,
        });
        if (data?.users) setUserCount(data.users);
      } catch (error) {
        console.error(error);
      }
    };
    fetchUsers();
  }, []);

  useEffect(() => {
    const fetchVendors = async () => {
      try {
        const { data } = await axios.get("/api/v1/auth/all-vendors", {
          withCredentials: true,
        });
        if (data?.vendors) setVendorCount(data.vendors);
      } catch (error) {
        console.error(error);
      }
    };
    fetchVendors();
  }, []);

  //  Fetch total revenue generated by vendors
  // useEffect(() => {
  //   const fetchVendorsRevenue = async () => {
  //     try {
  //       const { data } = await axios.get("/api/v1/revenue/vendors", {
  //         withCredentials: true,
  //       });
  //       setVendorsRevenue(data.revenueByVendors);
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   };
  //   fetchVendorsRevenue();
  // }, []);

  // Fetch revenue generated by business types
  // useEffect(() => {
  //   const fetchBusinessRevenue = async () => {
  //     try {
  //       const { data } = await axios.get("/api/v1/revenue/business-types", {
  //         withCredentials: true,
  //       });
  //       setBusinessRevenue(data.revenueByBusinessType);
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   };
  //   fetchBusinessRevenue();
  // }, []);

  // Fetch filtered sales data (for example, by vendor or business type)
  // useEffect(() => {
  //   const fetchFilteredSales = async () => {
  //     try {
  //       const { data } = await axios.get("/api/v1/sales/filtered", {
  //         params: {
  //           vendor: selectedVendor,
  //           businessType: selectedBusinessType,
  //         },
  //         withCredentials: true,
  //       });
  //       setFilteredSales(data.sales);
  //     } catch (error) {
  //       console.error(error);
  //     }
  //   };
  //   fetchFilteredSales();
  // }, [selectedVendor, selectedBusinessType]);

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const filteredUsers = userCount.filter((user) =>
    user.username.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const stats = [
    { icon: FaUsers, label: "Customers", value: userCount.length - 1 },
    { icon: FaStore, label: "Vendors", value: vendorCount.length },
    { icon: FaCalendarAlt, label: "Events", value: "215" },
    { icon: FaTicketAlt, label: "Tickets Sold", value: "31,215" },
    {
      icon: FaMoneyBillAlt,
      label: "Revenue",
      value: `Rs. ${revenue.toLocaleString()}`,
    },
    { icon: FaClock, label: "Upcoming Events", value: upcomingEvents },
    {
      icon: FaExclamationCircle,
      label: "Pending Approvals",
      value: pendingApprovals,
    },
  ];

  const revenueData = [
    { month: "Jan", revenue: 5000 },
    { month: "Feb", revenue: 8000 },
    { month: "Mar", revenue: 12000 },
    { month: "Apr", revenue: 10000 },
    { month: "May", revenue: 15000 },
    { month: "Jun", revenue: 18000 },
  ];

  const businessTypes = ["Movies", "Theatres", "Sports", "Events", "Concerts"];

  const vendorNames = vendorCount.map((vendor) => vendor.name);

  return (
    <div>
      <h1 className="text-3xl font-semibold text-gray-800 dark:text-white">
        Dashboard Overview
      </h1>

      {/* Search Bar */}
      <div className="mt-4">
        <input
          type="text"
          placeholder="Search Users"
          value={searchTerm}
          onChange={handleSearch}
          className="p-2 border rounded-md"
        />
        <ul>
          {filteredUsers.map((user, index) => (
            <li key={index} className="text-gray-600 dark:text-gray-300">
              {user.name}
              <button className="ml-2 text-red-500">Delete</button>
            </li>
          ))}
        </ul>
      </div>

      {/* Stats Overview */}
      <div className="mt-4">
        <div className="flex flex-wrap -mx-6">
          {stats.map((stat, index) => (
            <div
              key={index}
              className="w-full px-6 mt-4 sm:w-1/2 xl:w-1/4 xl:mt-0"
            >
              <div className="flex items-center px-5 py-6 bg-white rounded-md shadow-sm dark:bg-gray-700">
                <div
                  className="p-3 bg-opacity-75 rounded-full"
                  style={{
                    backgroundColor: `rgba(${index * 50}, ${index * 100}, ${
                      index * 150
                    }, 0.75)`,
                  }}
                >
                  <stat.icon className="w-8 h-8 text-white" />
                </div>
                <div className="mx-5">
                  <h4 className="text-2xl font-semibold text-gray-700 dark:text-gray-200">
                    {stat.value}
                  </h4>
                  <div className="text-gray-500 dark:text-gray-400">
                    {stat.label}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Revenue Over Time */}
      <div className="mt-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white">
          Revenue Over Time
        </h2>
        <div className="p-4 mt-4 bg-white rounded-md shadow-sm dark:bg-gray-700">
          <LineChart width={600} height={300} data={revenueData}>
            <XAxis dataKey="month" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="revenue" stroke="#8884d8" />
          </LineChart>
        </div>
      </div>

      {/* Revenue by Vendor (Pie Chart) */}
      <div className="mt-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white">
          Revenue by Vendor
        </h2>
        <div className="p-4 mt-4 bg-white rounded-md shadow-sm dark:bg-gray-700">
          <PieChart width={400} height={400}>
            <Pie
              data={vendorsRevenue}
              dataKey="revenue"
              nameKey="vendor"
              cx="50%"
              cy="50%"
              outerRadius={150}
              fill="#8884d8"
              label
            >
              {vendorsRevenue.map((entry, index) => (
                <Cell
                  key={index}
                  fill={index % 2 === 0 ? "#0088FE" : "#00C49F"}
                />
              ))}
            </Pie>
          </PieChart>
        </div>
      </div>

      {/* Revenue by Business Type (Bar Chart) */}
      <div className="mt-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white">
          Revenue by Business Type
        </h2>
        <div className="p-4 mt-4 bg-white rounded-md shadow-sm dark:bg-gray-700">
          <BarChart width={600} height={300} data={businessRevenue}>
            <XAxis dataKey="businessType" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="revenue" fill="#82ca9d" />
          </BarChart>
        </div>
      </div>

      {/* Filter Sales by Vendor and Business Type */}
      <div className="mt-8">
        <h2 className="text-2xl font-semibold text-gray-800 dark:text-white">
          Filter Sales
        </h2>
        <div className="flex space-x-4">
          <select
            onChange={(e) => setSelectedVendor(e.target.value)}
            value={selectedVendor}
            className="p-2 border rounded-md"
          >
            <option value="">Select Vendor</option>
            {vendorNames.map((vendor, index) => (
              <option key={index} value={vendor}>
                {vendor}
              </option>
            ))}
          </select>

          <select
            onChange={(e) => setSelectedBusinessType(e.target.value)}
            value={selectedBusinessType}
            className="p-2 border rounded-md"
          >
            <option value="">Select Business Type</option>
            {businessTypes.map((type, index) => (
              <option key={index} value={type}>
                {type}
              </option>
            ))}
          </select>
        </div>

        <div className="mt-4">
          <h3 className="text-xl font-semibold">Sales Data</h3>
          <table className="min-w-full mt-2 bg-white rounded-lg shadow-sm dark:bg-gray-700">
            <thead>
              <tr className="text-left">
                <th className="px-4 py-2">Date</th>
                <th className="px-4 py-2">Vendor</th>
                <th className="px-4 py-2">Business Type</th>
                <th className="px-4 py-2">Revenue</th>
              </tr>
            </thead>
            <tbody>
              {filteredSales.map((sale, index) => (
                <tr key={index} className="border-t">
                  <td className="px-4 py-2">{sale.date}</td>
                  <td className="px-4 py-2">{sale.vendor}</td>
                  <td className="px-4 py-2">{sale.businessType}</td>
                  <td className="px-4 py-2">{sale.revenue}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Overview;
